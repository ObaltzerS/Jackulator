/** the logic behind the jack calculator */

class CalcLogic {
    field int op1, op2, op3;  // field = property = member variable.
   
    /** Constructs a (reduced) fraction from the given numerator and denominator. */
    constructor CalcLogic new() {
         let op1 = 0;
         let op2 = 0;
         return this;
    }
 
    // Reduces this fraction.
    method int add(int a, int b) {
         let op1 = a;
         let op2 = b;
         return op1 + op2;
    }
    
    method int subtract(int a, int b) {
         let op1 = a;
         let op2 = b;
         return op1 - op2;
    }

    method int divide(int a, int b) {
         let op1 = a;
         let op2 = b;
         return op1 / op2;
    }

    method int multiply(int a, int b) {
         let op1 = a;
         let op2 = b;
         return op1 * op2;
    }

    method int factorial(int a) {
         let op1 = a;
         let op2 = 1;
         while (op1 > 0) {
             let op2 = op2 * op1;
             let op1 = op1 - 1;
         }
         return op2;
    }


    method int power(int a, int b) {
         let op1 = a;
         let op2 = b;
         let op3 = 1;
         while (op2 > 0) {
             let op3 = op3 * op1;
             let op2 = op2 - 1;
         }
         return op3;
    }

    method int calculate(string operation){
     var int result;
     let result = 6;
     if ((operation = "*")){
          let result = calculator.multiply(Input.getOp(), Input.getOp());
          }
     if ((operation = "/")){
          let result = calculator.divide(Input.getOp(), Input.getOp());
          }
     if ((operation = "+")){
          let result = calculator.add(Input.getOp(), Input.getOp());
          }
     if ((operation = "-")){
          let result = calculator.subtract(Input.getOp(), Input.getOp());
          }
     if ((operation = "!")){
          let result = calculator.factorial(Input.getOp());
          }
     if ((operation = "^")){
          let result = calculator.power(Input.getOp(), Input.getOp());
          }
     return result;

    }
    method void dispose() {
       do Memory.deAlloc(this);  // uses an OS routine to recycle the memory held by the object
       return;
    }
 }
 